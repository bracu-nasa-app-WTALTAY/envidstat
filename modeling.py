# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TVyTrJDm0j6r6L8hBeqe8d4u5cIRJkXU
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, BaggingClassifier
from sklearn import model_selection
from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.pipeline import Pipeline
from sklearn.linear_model import SGDClassifier
import plotly.graph_objs as go
from tqdm import tqdm
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from sklearn.ensemble  import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from keras.layers import Dense, Dropout, LSTM, Embedding
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from sklearn.metrics import confusion_matrix 
import seaborn as sn
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler

from google.colab import files
uploaded = files.upload()

np.random.seed(7)

df1 = pd.read_csv('NY&WA_FINAL (1).csv')

X1 = df1[['AWND', 'TAVG']]
y1= df1['THREAT_LEVEL']

encoder = LabelEncoder()
y2 = encoder.fit_transform(y1)


X_train, X_test, y_train, y_test = train_test_split(X1, y2, test_size=0.25, random_state=0)

model = Sequential()

model.add(Dense(5000, input_dim=2, activation='relu'))
model.add(Dense(101, activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(1, activation='softmax'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()
print('fuck u')

scores = model.evaluate(X_test, y_test, verbose=0)
print("\nAccuracy:%.2f%%" % (scores[1]*100))

from sklearn.neighbors import KNeighborsClassifier
accuracy=[]
for i in range(1,21):
    knn = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k
    knn.fit(X_train, y_train)
    y_pred_knn = knn.predict(X_test)
    y_pred_knn1=knn.predict(X)
    accuracy.append(accuracy_score(y_test, y_pred_knn))
    print(" N= {}, Accuracy {:.2f}%".format(i,accuracy_score(y_test, y_pred_knn)*100))
   
plt.plot(range(1,21),accuracy)
plt.xticks(np.arange(1,21,1))
plt.show()

knn = KNeighborsClassifier(n_neighbors = 1)  # n_neighbors means k
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)
y_pred_knn1 = knn.predict(X)
print("KNNClassifier")
print("Accuracy: {:.2f}%".format(accuracy_score(y_test, y_pred_knn)*100))
print(classification_report(y_test, y_pred_knn))

from sklearn.ensemble  import RandomForestClassifier
RF = RandomForestClassifier(n_estimators=100, criterion='entropy', random_state=0)  
RF.fit(X_train, y_train)
y_pred_RF = RF.predict(X_test)
y_pred_RF1 = RF.predict(X)
print("RandomForestClassifier")
print("Accuracy: {:.2f}%".format(accuracy_score(y_test, y_pred_RF)*100))
print(classification_report(y_test, y_pred_RF))

from sklearn.tree import DecisionTreeClassifier
dtclassifier= DecisionTreeClassifier(criterion='entropy')
dtclassifier.fit(X_train,y_train)
print("DecisionTreeClassifier")
print("Accuracy: {:.2f}%".format(accuracy_score(y_test, y_pred_DT)*100))
print(classification_report(y_test, y_pred_DT))

